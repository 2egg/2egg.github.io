<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeungJay</title>
  
  <subtitle>韩良杰的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-15T05:11:51.982Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>韩良杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Liskov Substitution Principle</title>
    <link href="http://yoursite.com/2019/05/05/Liskov-Substitution-Principle/"/>
    <id>http://yoursite.com/2019/05/05/Liskov-Substitution-Principle/</id>
    <published>2019-05-05T06:54:37.000Z</published>
    <updated>2019-05-15T05:11:51.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="里氏代换原则-——-LSP"><a href="#里氏代换原则-——-LSP" class="headerlink" title="里氏代换原则 —— LSP"></a>里氏代换原则 —— LSP</h2><blockquote><p>任何基类可以出现的地方，子类一定可以出现！</p></blockquote><p>&emsp;&emsp;里氏替换原则，OCP作为OO的高层原则，主张使用“抽象(Abstraction)”和“多态(Polymorphism)”将<strong>设计中的静态结构改为动态结构，维持设计的封闭性</strong>。“抽象”是语言提供的功能。“多态”由继承语义实现。<br><a id="more"></a><br>里氏替换原则包含以下4层含义：</p><ul><li>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法。</li><li>子类可以增加自己特有的方法。</li><li>当子类覆盖或者实现父类的方法时，方法的前置条件（方法的形象）要比父类的方法输入参数更宽松。</li><li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值） 要比父类的更加严谨。</li></ul><p>&emsp;&emsp;LSP 一个软件如果使用的是一个父类的话， 那么一定适用于其子类， 而察觉不出父类对象和子类对象的区别。 也即是说，在软件里面，<strong> 把父类替换成它的子类， 程序的行为不会有变化</strong>， 简单地说， 子类型必须能够替换掉它们的父类型。 举个例子：<strong>企鹅和鸟的关系，企鹅在生物学上属于鸟类，但在面对对象设计中 企鹅并不能以父类(鸟)的身份出现 ，因为企鹅并不具备鸟飞行的行为！</strong> 如果有两个具体的类：A,B 之间的关系违反了LSP的设计，那么根据具体的情况可以在下面的两种重构方案中选择：</p><ul><li><figure class="highlight java"><figcaption><span>创建一个新的超类C（抽象类），将A,B的共同行为转移到C中来解决问题。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span> 菜() &#123;</span><br><span class="line">System.out.println(<span class="string">"红烧排骨"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Dad</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span> 菜()&#123;</span><br><span class="line">System.out.println(<span class="string">"红烧鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> 西点()&#123;</span><br><span class="line">System.out.println(<span class="string">"蛋糕"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line">s.菜();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span> <span class="keyword">extends</span> <span class="title">Mom</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span> 菜() &#123;</span><br><span class="line"><span class="keyword">super</span>.家传菜(<span class="string">"红烧排骨"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Mom</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span> 菜()&#123;</span><br><span class="line"><span class="keyword">super</span>.家传菜(<span class="string">"红烧鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> 西点()&#123;</span><br><span class="line">System.out.println(<span class="string">"蛋糕"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mom</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span> 家传菜(String 菜) &#123;</span><br><span class="line">System.out.println(菜);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line">s.菜();</span><br><span class="line"></span><br><span class="line">Dad d = <span class="keyword">new</span> Son();</span><br><span class="line">d.菜();</span><br><span class="line">这样的话行为没有改变，行为都是做家传菜 但是做出来的家传菜内容不一样！</span><br></pre></td></tr></table></figure></li><li><p><strong>以下方式经常被实际运用</strong></p><figure class="highlight java"><figcaption><span>从B到A的继承关系改为委派关系。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">原本继承关系(Inheritance)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"A Data"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line">b.print();</span><br><span class="line"></span><br><span class="line">变成委派关系(Delegation)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"The Delegate"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">a.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line">b.print();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;里氏代换原则-——-LSP&quot;&gt;&lt;a href=&quot;#里氏代换原则-——-LSP&quot; class=&quot;headerlink&quot; title=&quot;里氏代换原则 —— LSP&quot;&gt;&lt;/a&gt;里氏代换原则 —— LSP&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;任何基类可以出现的地方，子类一定可以出现！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;里氏替换原则，OCP作为OO的高层原则，主张使用“抽象(Abstraction)”和“多态(Polymorphism)”将&lt;strong&gt;设计中的静态结构改为动态结构，维持设计的封闭性&lt;/strong&gt;。“抽象”是语言提供的功能。“多态”由继承语义实现。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Single responsibility principle</title>
    <link href="http://yoursite.com/2019/04/26/Single-responsibility-principle/"/>
    <id>http://yoursite.com/2019/04/26/Single-responsibility-principle/</id>
    <published>2019-04-26T09:09:50.000Z</published>
    <updated>2019-05-05T06:51:36.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单一职责原则-——-SRP"><a href="#单一职责原则-——-SRP" class="headerlink" title="单一职责原则 —— SRP"></a>单一职责原则 —— SRP</h2><blockquote><p>一个类应该只有一个发生变化的原因</p><footer><strong>Robert C. Martin</strong><cite>敏捷软件开发：原则、模式和实践</cite></footer></blockquote><p>&emsp;&emsp;所谓职责是指类变化的原因。如果一个类有多于一个的动机被改变，那么这个类就具有多于一个的职责。而单一职责原则就是指一个类或者模块应该有且只有一个改变的原因。(看看就行)</p><p>&emsp;&emsp;<strong>如果一个类承担的职责过多，就等于把这些职责耦合在一起了。一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当发生变化时，设计会遭受到意想不到的破坏。而如果想要避免这种现象的发生，就要尽可能的遵守单一职责原则。此原则的核心就是解耦和增强内聚性</strong>。<br><a id="more"></a><br>&emsp;&emsp;内聚标志一个模块内各个元素彼此结合的紧密程度，它是信息隐蔽和局部化概念的自然扩展。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。（T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。也就是说职责P1和P2被耦合在了一起。）</p><p>&emsp;&emsp;<strong>程序讲究的是低耦合，高内聚。就是同一个模块内的各个元素之间要高度紧密，但是各个模块之间的相互依存度却要不那么紧密。</strong>内聚和耦合是密切相关的，同其他模块存在高耦合的模块意味着低内聚，而高内聚的模块意味着该模块同其他模块之间是低耦合。在进行软件设计时，应力争做到高内聚，低耦合。</p><h3 id="实现单一职责原则的好处"><a href="#实现单一职责原则的好处" class="headerlink" title="实现单一职责原则的好处"></a>实现单一职责原则的好处</h3><ol><li>降低类的复杂度；</li><li>提高类的可读性，提高系统的可维护性；</li><li>降低变更引起的风险（降低对其他功能的影响）;</li></ol><h3 id="实现单一职责原则的注意点"><a href="#实现单一职责原则的注意点" class="headerlink" title="实现单一职责原则的注意点"></a>实现单一职责原则的注意点</h3><ol><li>单一职责原则最难划分的是职责。</li><li>单一职责原则提出标准：用职责和变化原因来</li></ol><h3 id="错误Demo"><a href="#错误Demo" class="headerlink" title="错误Demo"></a>错误Demo</h3><p>&emsp;&emsp;假设机器有四个步骤分别为：<strong>通电，启动，停止，断电</strong>；我们正确的方式应该是每个步骤写一个方法，最后写一个方法的集合，内容：什么时候调用通电 什么时候启动，什么时候停止，什么时候断电，而不是直接将四个步骤集合在一起，如果四个方法集合在一起的话，首先的问题是<strong>职责太多</strong>，不用解释，其次如果有一天我们只需要启动这个机器 不需要别的步骤 还需要再次寻找方法集合中的启动有哪些 复制出来之后<strong>冗余太多</strong>，最后的问题是我们自己都<strong>看不懂</strong>自己当初怎么写的了 内容太多，逻辑加控制，假设现在新增加一个需求，机器在通电之后3分钟之内没有启动的话自动执行断电，到这个时候我们就会很麻烦 首先步骤需要重新调试，其次控制也需要增加逻辑等等一系列问题…..</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单一职责原则-——-SRP&quot;&gt;&lt;a href=&quot;#单一职责原则-——-SRP&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则 —— SRP&quot;&gt;&lt;/a&gt;单一职责原则 —— SRP&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;一个类应该只有一个发生变化的原因&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Robert C. Martin&lt;/strong&gt;&lt;cite&gt;敏捷软件开发：原则、模式和实践&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;所谓职责是指类变化的原因。如果一个类有多于一个的动机被改变，那么这个类就具有多于一个的职责。而单一职责原则就是指一个类或者模块应该有且只有一个改变的原因。(看看就行)&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;如果一个类承担的职责过多，就等于把这些职责耦合在一起了。一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当发生变化时，设计会遭受到意想不到的破坏。而如果想要避免这种现象的发生，就要尽可能的遵守单一职责原则。此原则的核心就是解耦和增强内聚性&lt;/strong&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Open Close Principle</title>
    <link href="http://yoursite.com/2019/04/24/Open-Close-Principle/"/>
    <id>http://yoursite.com/2019/04/24/Open-Close-Principle/</id>
    <published>2019-04-24T01:11:30.000Z</published>
    <updated>2019-05-05T00:56:45.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开闭原则-——-OCP"><a href="#开闭原则-——-OCP" class="headerlink" title="开闭原则 —— OCP"></a>开闭原则 —— OCP</h3><blockquote><p>Software entities should be open for extension,but closed for modification(模块应对扩展开放,而对修改关闭！)</p><footer><strong>Bertrand Meyer</strong><cite>Wide Awake</cite></footer></blockquote><p>模块应尽量在不修改原（是“原”，指原来的代码）代码的情况下进行扩展。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂(Factory) 有一条生产线(prodLine),生产"产品A".</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">prodLine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"产品A"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户 订购该工厂的该产品(产品A)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我订购并收到产品："</span>+order());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line">        <span class="keyword">return</span> factory.prodLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行效果</span></span><br><span class="line">我订购并收到产品：产品A</span><br><span class="line"></span><br><span class="line"><span class="comment">/*现因为市场需求改变增加,需要新加一条生产"产品B"的生产线, 但是资金有限。</span></span><br><span class="line"><span class="comment">  只能再原有的生产线上增加功能(既可以生产A，又可以生产B)*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">prodLine</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"产品A"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"产品B"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*当我们修改之后 会发现客户方有问题（订购不了产品） 因为什么！ </span></span><br><span class="line"><span class="comment">因为我们需要知道客户到底要什么产品(type)，客户没说，我们也不能做啊，不然做出来退货怎么办(出BUG)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我订购并收到产品："</span>+order());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line"><span class="comment">//客户申明要什么产品</span></span><br><span class="line">        <span class="keyword">return</span> factory.prodLine(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">我订购并收到产品：产品A</span><br></pre></td></tr></table></figure></p><p>以上只是最基本的<br><figure class="highlight java"><figcaption><span>开闭原则</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//我们建厂之前需要提前写一个设计稿(接口)为未来做准备 比如 生产N种产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">prodLine</span><span class="params">(<span class="keyword">int</span> type)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在市场上 出现了需要产品的客户 我们直接按照接口 建造工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">implements</span> <span class="title">IFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">prodLine</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(type == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"产品A"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"产品B"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户方  没有变化 申明产品的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我订购并收到产品："</span>+order());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line"><span class="comment">//客户申明要什么产品</span></span><br><span class="line">        <span class="keyword">return</span> factory.prodLine(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">我订购并收到产品：产品A/B</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开闭原则-——-OCP&quot;&gt;&lt;a href=&quot;#开闭原则-——-OCP&quot; class=&quot;headerlink&quot; title=&quot;开闭原则 —— OCP&quot;&gt;&lt;/a&gt;开闭原则 —— OCP&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;Software entities should be open for extension,but closed for modification(模块应对扩展开放,而对修改关闭！)&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Bertrand Meyer&lt;/strong&gt;&lt;cite&gt;Wide Awake&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;模块应尽量在不修改原（是“原”，指原来的代码）代码的情况下进行扩展。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Design Patterns of Java</title>
    <link href="http://yoursite.com/2019/04/23/Twenty-three-design-patterns-of-Java/"/>
    <id>http://yoursite.com/2019/04/23/Twenty-three-design-patterns-of-Java/</id>
    <published>2019-04-23T05:13:18.000Z</published>
    <updated>2019-04-26T09:15:27.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-the-design-pattern"><a href="#What-is-the-design-pattern" class="headerlink" title="What is the design pattern?"></a>What is the design pattern?</h3><blockquote><p>设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。<br>使用设计模式的目的：为了代码可重用性、让代码更容易被他人理解、保证代码可靠性。 设计模式使代码编写真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。</p><footer><strong>百度</strong><cite><a href="https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549?fr=aladdin" target="_blank" rel="noopener">设计模式概念</a></cite></footer></blockquote><a id="more"></a><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><blockquote><p>为什么要提倡“Design Pattern呢？根本原因是为了代码复用，增加可维护性。那么怎么才能实现代码复用呢？<br>面向对象有几个原则：<br>    开闭原则（Open Closed Principle，OCP）、<br>    单一职责原则（Single Responsiblity Principle SRP）、<br>    里氏代换原则（Liskov Substitution Principle，LSP）、<br>    依赖倒转原则（Dependency Inversion Principle，DIP）、<br>    接口隔离原则（Interface Segregation Principle，ISP）、<br>    合成/聚合复用原则（Composite/Aggregate Reuse Principle，CARP）、<br>    最小知识原则（Principle of Least Knowledge，PLK，也叫迪米特法则）。<br>    开闭原则具有理想主义的色彩，它是面向对象设计的终极目标。其他几条，则可以看做是开闭原则的实现方法。<br>    设计模式就是实现了这些原则，从而达到了代码复用、增加可维护性的目的</p><footer><strong>百度</strong><cite><a href="https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549?fr=aladdin" target="_blank" rel="noopener">设计模式设计原则</a></cite></footer></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-is-the-design-pattern&quot;&gt;&lt;a href=&quot;#What-is-the-design-pattern&quot; class=&quot;headerlink&quot; title=&quot;What is the design pattern?&quot;&gt;&lt;/a&gt;What is the design pattern?&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。&lt;br&gt;使用设计模式的目的：为了代码可重用性、让代码更容易被他人理解、保证代码可靠性。 设计模式使代码编写真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;百度&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;设计模式概念&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo font table</title>
    <link href="http://yoursite.com/2019/04/22/Hexo%20font%20table/"/>
    <id>http://yoursite.com/2019/04/22/Hexo font table/</id>
    <published>2019-04-22T01:23:55.000Z</published>
    <updated>2019-04-23T03:09:33.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1，字体介绍"><a href="#1，字体介绍" class="headerlink" title="1，字体介绍"></a>1，字体介绍</h3><p><em>这是斜体</em> 或 <em>这也是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del><br><a id="more"></a></p><h2 id="2，分级标题"><a href="#2，分级标题" class="headerlink" title="2，分级标题"></a>2，分级标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3，超链接"><a href="#3，超链接" class="headerlink" title="3，超链接"></a>3，超链接</h2><p>写法：</p><p>行内形式：<a href="https://2egg.github.io/" target="_blank" rel="noopener">我的博客</a><br>参考形式：[我的博客][1]，有一个很好的平台-[简书][2]<br>[1]:<a href="https://xfbxfbxfb.github.io/" target="_blank" rel="noopener">https://xfbxfbxfb.github.io/</a><br>[2]:<a href="http://www.jianshu.com/" target="_blank" rel="noopener">http://www.jianshu.com/</a></p><h2 id="4-列表"><a href="#4-列表" class="headerlink" title="4,列表"></a>4,列表</h2><p>无序列表：<br>写法：</p><ul><li>无序列表项1</li></ul><ul><li>无序列表项2</li></ul><ul><li>无序列表项3</li></ul><p>有序列表：并不是真的自动排序<br>写法：<br>    1.1有序列表项1<br>    3.3有序列表项4<br>    2.2有序列表项3</p><h2 id="6，表格"><a href="#6，表格" class="headerlink" title="6，表格"></a>6，表格</h2><table><thead><tr><th>表头1</th><th style="text-align:left">表头2</th><th style="text-align:center">表头3</th><th style="text-align:right">表头4</th></tr></thead><tbody><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对其</td><td style="text-align:right">右对齐</td></tr><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对其</td><td style="text-align:right">右对齐</td></tr><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对其</td><td style="text-align:right">右对齐</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1，字体介绍&quot;&gt;&lt;a href=&quot;#1，字体介绍&quot; class=&quot;headerlink&quot; title=&quot;1，字体介绍&quot;&gt;&lt;/a&gt;1，字体介绍&lt;/h3&gt;&lt;p&gt;&lt;em&gt;这是斜体&lt;/em&gt; 或 &lt;em&gt;这也是斜体&lt;/em&gt;&lt;br&gt;&lt;strong&gt;这是粗体&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;这是加粗斜体&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;del&gt;这是删除线&lt;/del&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo Code specification</title>
    <link href="http://yoursite.com/2019/04/19/Hexo%20Code%20specification/"/>
    <id>http://yoursite.com/2019/04/19/Hexo Code specification/</id>
    <published>2019-04-19T08:55:08.000Z</published>
    <updated>2019-04-23T03:10:26.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。<br><blockquote><p>content</p><footer><strong>作者,来源</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">原链接标题</a></cite></footer></blockquote><br><a id="more"></a><br>没有提供参数，则只输出普通的 blockquote<br><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote></p><p>引用书上的句子<br><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote></p><p>引用 Twitter<br><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote></p><p>引用网络上的文章<br><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></cite></footer></blockquote></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>普通代码块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;Hello World!&apos;);</span><br><span class="line">alert(&apos;Hello World!&apos;);</span><br></pre></td></tr></table></figure><br>指定语言<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure><br>附加说明<br><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><br>附加说明和网址<br><figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><br>另一种表现形式<br><figure class="highlight javascript"><figcaption><span>说明</span><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'Hello World!'</span>)</span><br></pre></td></tr></table></figure></p><p>在文章中插入获取的引用<br><blockquote class="pullquote ZhangSan"><p>content</p></blockquote></p><h2 id="引用图"><a href="#引用图" class="headerlink" title="引用图"></a>引用图</h2><p>添加一个内嵌页面iframe<br><iframe src="https://www.baidu.com" width="100%" height="300" frameborder="0" allowfullscreen></iframe></p><p>在文章中插入指定大小的图片。<br><img src="https://wallpapers.wallhaven.cc/wallpapers/full/wallhaven-757837.jpg" width="700" height="450" title="这是一个飞碟"><br>插入图<br><img src="/2019/04/19/Hexo Code specification/Hexo代码范例/wallhaven-760894.jpg" alt="该图来源于wallhaven"></p><p>文字链接</p><a href="https://twitter.com/devdocs/status/356095192085962752" title="作者 提示" target="_blank" rel="noopener">为何半夜母猪如此惨叫</a>段落content]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引用块&quot;&gt;&lt;a href=&quot;#引用块&quot; class=&quot;headerlink&quot; title=&quot;引用块&quot;&gt;&lt;/a&gt;引用块&lt;/h2&gt;&lt;p&gt;在文章中插入引言，可包含作者、来源和标题。&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;content&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;作者,来源&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://twitter.com/devdocs/status/356095192085962752&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原链接标题&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/04/19/hello-world/"/>
    <id>http://yoursite.com/2019/04/19/hello-world/</id>
    <published>2019-04-19T08:47:54.228Z</published>
    <updated>2019-04-23T03:10:57.260Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
